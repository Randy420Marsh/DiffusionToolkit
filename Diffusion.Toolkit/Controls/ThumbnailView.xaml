<UserControl x:Class="Diffusion.Toolkit.Controls.ThumbnailView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Diffusion.Toolkit.Controls"
             xmlns:fa="http://schemas.fontawesome.io/icons/"
             xmlns:toolkit="clr-namespace:Diffusion.Toolkit"
             xmlns:converters="clr-namespace:Diffusion.Toolkit.Converters"
             xmlns:lex="http://wpflocalizeextension.codeplex.com"
             xmlns:behaviors="clr-namespace:Diffusion.Toolkit.Behaviors"
             xmlns:models="clr-namespace:Diffusion.Toolkit.Models"
             lex:LocalizeDictionary.Provider="{StaticResource LocalizationProvider}"
             lex:LocalizeDictionary.Separation="."
             lex:LocalizeDictionary.DefaultProvider="{StaticResource LocalizationProvider}"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="400">
    <UserControl.Resources>
        <ResourceDictionary>
            <local:ThumbnailViewModel x:Key="ThumbnailViewModel"></local:ThumbnailViewModel>
            <converters:InverseBoolToVisibilityCollapsedConverter x:Key="invBoolToVisCol"></converters:InverseBoolToVisibilityCollapsedConverter>
            <converters:BoolToVisibilityCollapsedConverter x:Key="boolToVisCol"></converters:BoolToVisibilityCollapsedConverter>
            <converters:InverseBoolToVisibilityConverter x:Key="invBoolToVis"></converters:InverseBoolToVisibilityConverter>
            <converters:IntToVisibilityConverter x:Key="intToVis"></converters:IntToVisibilityConverter>
            <converters:StringToVisibilityConverter x:Key="strToVis"></converters:StringToVisibilityConverter>
            <converters:BoolToBlurIntConverter x:Key="boolToBlur"></converters:BoolToBlurIntConverter>
            <converters:BoolToBlurIntMultiConverter x:Key="boolToBlurMulti"></converters:BoolToBlurIntMultiConverter>
            <converters:BoolToVisibilityConverter x:Key="boolToVis"></converters:BoolToVisibilityConverter>
            <converters:BoolToVisibilityMultiConverter x:Key="boolToVisMulti"></converters:BoolToVisibilityMultiConverter>
            <converters:InverseBoolToVisibilityMultiConverter x:Key="invBoolToVisMulti"></converters:InverseBoolToVisibilityMultiConverter>
            <converters:BoolToOpacityConverter x:Key="BoolToOpacity"></converters:BoolToOpacityConverter>
            <converters:FileEntryTypeVisibilityConverter x:Key="fileEntryTypeVis"></converters:FileEntryTypeVisibilityConverter>
            <converters:AddConverter x:Key="add"></converters:AddConverter>
            <converters:FilenameVisibilityConverter x:Key="filenameVis"></converters:FilenameVisibilityConverter>
            <local:ThumbnailTemplateSelector x:Key="ThumbnailTemplateSelector"></local:ThumbnailTemplateSelector>


            <DataTemplate x:Key="FolderDataTemplate" DataType="{x:Type models:ImageEntry}">
                <Grid Background="Transparent">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Setter Property="Width" Value="{Binding DataContext.ThumbnailSize, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Model.MainModel.ThumbnailViewMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="{x:Static local:ThumbnailViewMode.Compact}">
                                    <Setter Property="Width" Value="128" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="128" />
                        <RowDefinition Height="40"/>
                    </Grid.RowDefinitions>

                    <fa:ImageAwesome 
                        Height="64"
                        Icon="FolderOutlinepenOutline"
                        Foreground="{DynamicResource ForegroundBrush}" 
                        HorizontalAlignment="Center" VerticalAlignment="Center"></fa:ImageAwesome>
                    <Label Grid.Row="1" Foreground="{DynamicResource ForegroundBrush}"  HorizontalContentAlignment="Center" >
                        <Label>
                            <TextBlock TextTrimming="CharacterEllipsis" Text="{Binding Name}"></TextBlock>
                        </Label>
                    </Label>
                </Grid>

            </DataTemplate>

            <DataTemplate x:Key="FileDataTemplate" DataType="{x:Type models:ImageEntry}">
                <Grid Background="Transparent"
                      Width="{Binding DataContext.ThumbnailSize, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" 
                      >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="{Binding DataContext.ThumbnailSize, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" />
                        <RowDefinition Height="40"/>
                    </Grid.RowDefinitions>
                    <local:Thumbnail 
                        Source="{Binding Thumbnail}" 
                        Foreground="{DynamicResource ForegroundBrush}"
                        Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
                        Data="{Binding .}"
                        Height="{Binding DataContext.ThumbnailSize, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" Width="{Binding DataContext.ThumbnailSize, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" 
                        MaxWidth="{Binding DataContext.ThumbnailSize, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" MaxHeight="{Binding DataContext.ThumbnailSize, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" 
                        HorizontalAlignment="Stretch" VerticalAlignment="Top">

                        <local:Thumbnail.Effect>
                            <BlurEffect  KernelType="Gaussian">
                                <BlurEffect.Radius>
                                    <MultiBinding Converter="{StaticResource boolToBlurMulti}" ConverterParameter="20">
                                        <Binding Path="NSFW"></Binding>
                                        <Binding ElementName="ThumbnailListView" Path="DataContext.NSFWBlur" ></Binding>
                                    </MultiBinding>
                                </BlurEffect.Radius>
                            </BlurEffect>
                        </local:Thumbnail.Effect>
                    </local:Thumbnail>
                    <Grid Background="{x:Null}">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="32"/>
                        </Grid.RowDefinitions>
                        <local:ThumbnailIcons Grid.Row="1"
                        Data="{Binding .}"
                        Height="32"
                        ></local:ThumbnailIcons>
                    </Grid>
                    <Label Grid.Row="1" Foreground="{DynamicResource ForegroundBrush}"  HorizontalContentAlignment="Center">
                        <Label.Style>
                            <Style TargetType="Label">
                                <Setter Property="Visibility" Value="Visible"></Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.MainModel.ShowFilenames, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="{StaticResource FalseValue}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Label.Style>
                        <Label>
                            <TextBlock TextTrimming="CharacterEllipsis" Text="{Binding Name}"></TextBlock>
                        </Label>
                    </Label>
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="CompactFileView" DataType="{x:Type models:ImageEntry}">
                <Grid Background="Transparent"
                      Width="{Binding ThumbnailWidth}" 
                      >
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <local:Thumbnail 
                        Source="{Binding Thumbnail}" 
                        Foreground="{DynamicResource ForegroundBrush}"
                        Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
                        Data="{Binding .}"
                        Height="{Binding ThumbnailHeight}" 
                        Width="{Binding ThumbnailWidth}" 
                        MinWidth="{Binding DataContext.ThumbnailSize, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" 
                        MinHeight="{Binding DataContext.ThumbnailSize, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" 
                        HorizontalAlignment="Stretch" VerticalAlignment="Top">

                        <local:Thumbnail.Effect>
                            <BlurEffect  KernelType="Gaussian">
                                <BlurEffect.Radius>
                                    <MultiBinding Converter="{StaticResource boolToBlurMulti}" ConverterParameter="20">
                                        <Binding Path="NSFW"></Binding>
                                        <Binding ElementName="ThumbnailListView" Path="DataContext.NSFWBlur" ></Binding>
                                    </MultiBinding>
                                </BlurEffect.Radius>
                            </BlurEffect>
                        </local:Thumbnail.Effect>
                    </local:Thumbnail>
                    <Grid Background="{x:Null}">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="32"/>
                        </Grid.RowDefinitions>
                        <local:ThumbnailIcons Grid.Row="1"
                                              Data="{Binding .}"
                                              Height="32"
                        ></local:ThumbnailIcons>
                    </Grid>
                    <Label Grid.Row="1" Foreground="{DynamicResource ForegroundBrush}"  HorizontalContentAlignment="Center" >
                        <Label.Style>
                            <Style TargetType="Label">
                                <Setter Property="Visibility" Value="Visible"></Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Model.MainModel.ShowFilenames, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="{StaticResource FalseValue}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Label.Style>
                        <Label>
                            <TextBlock TextTrimming="CharacterEllipsis" Text="{Binding Name}"></TextBlock>
                        </Label>
                    </Label>
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="ClassicView"  DataType="{x:Type models:ImageEntry}">
                <Border Margin="12" >
                    <!--<ContentControl Content="{Binding Path=Self}" ContentTemplate="{StaticResource FileDataTemplate}" ContentTemplateSelector="{DynamicResource ThumbnailTemplateSelector}"/>-->
                    <ContentControl Content="{Binding Path=.}">
                        <ContentControl.Style>
                            <Style TargetType="ContentControl">
                                <Setter Property="ContentTemplate" Value="{StaticResource FileDataTemplate}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding EntryType}" Value="{x:Static models:EntryType.Folder}">
                                        <Setter Property="ContentTemplate" Value="{StaticResource FolderDataTemplate}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding EntryType}" Value="{x:Static models:EntryType.File}">
                                        <Setter Property="ContentTemplate" Value="{StaticResource FileDataTemplate}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContentControl.Style>
                    </ContentControl>
                </Border>
            </DataTemplate>

            <DataTemplate x:Key="CompactView"  DataType="{x:Type models:ImageEntry}">
                <Border Margin="{Binding Model.ThumbnailSpacing, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
                    <ContentControl Content="{Binding Path=.}">
                        <ContentControl.Style>
                            <Style TargetType="ContentControl">
                                <Setter Property="ContentTemplate" Value="{StaticResource FileDataTemplate}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding EntryType}" Value="{x:Static models:EntryType.Folder}">
                                        <Setter Property="ContentTemplate" Value="{StaticResource FolderDataTemplate}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding EntryType}" Value="{x:Static models:EntryType.File}">
                                        <Setter Property="ContentTemplate" Value="{StaticResource CompactFileView}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContentControl.Style>
                    </ContentControl>
                </Border>
            </DataTemplate>

            <DataTemplate x:Key="SwitchingTemplate">
                <ContentControl Content="{Binding}">
                    <ContentControl.Style>
                        <Style TargetType="ContentControl">
                            <Setter Property="ContentTemplate" Value="{StaticResource ClassicView}" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Model.MainModel.ThumbnailViewMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="{x:Static local:ThumbnailViewMode.Compact}">
                                    <Setter Property="ContentTemplate" Value="{StaticResource CompactView}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContentControl.Style>
                </ContentControl>
            </DataTemplate>

        </ResourceDictionary>

    </UserControl.Resources>
    <UserControl.InputBindings>
        <KeyBinding Key="Back" Command="{Binding Model.MainModel.NavigateToParentFolderCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"></KeyBinding>
        <KeyBinding Key="F2" Command="{Binding Model.MainModel.RenameFileCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="1"></KeyBinding>
        <KeyBinding Modifiers="Shift" Key="D1" Command="{Binding Model.MainModel.OpenWithCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="1"></KeyBinding>
        <KeyBinding Modifiers="Shift" Key="D2" Command="{Binding Model.MainModel.OpenWithCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="2"></KeyBinding>
        <KeyBinding Modifiers="Shift" Key="D3" Command="{Binding Model.MainModel.OpenWithCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="3"></KeyBinding>
        <KeyBinding Modifiers="Shift" Key="D4" Command="{Binding Model.MainModel.OpenWithCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="4"></KeyBinding>
        <KeyBinding Modifiers="Shift" Key="D5" Command="{Binding Model.MainModel.OpenWithCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="5"></KeyBinding>
        <KeyBinding Modifiers="Shift" Key="D6" Command="{Binding Model.MainModel.OpenWithCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="6"></KeyBinding>
        <KeyBinding Modifiers="Shift" Key="D7" Command="{Binding Model.MainModel.OpenWithCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="7"></KeyBinding>
        <KeyBinding Modifiers="Shift" Key="D8" Command="{Binding Model.MainModel.OpenWithCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="8"></KeyBinding>
        <KeyBinding Modifiers="Shift" Key="D9" Command="{Binding Model.MainModel.OpenWithCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="9"></KeyBinding>
        <KeyBinding Modifiers="Shift" Key="D0" Command="{Binding Model.MainModel.OpenWithCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" CommandParameter="10"></KeyBinding>
    </UserControl.InputBindings>
    <Grid  DataContext="{Binding Path=Model, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="30"/>
        </Grid.RowDefinitions>
        <Label Grid.Row="0" Visibility="{Binding IsEmpty, Converter={StaticResource boolToVis}}" 
               Style="{StaticResource TitleText}"
               Content="{Binding ResultStatus}"
               VerticalContentAlignment="Center" 
               HorizontalContentAlignment="Center" 
        ></Label>


        <!--<ListView Grid.Row="0" x:Name="ThumbnailListView2" Margin="2" Padding="10" ItemsSource="{Binding Images}">
            <ListView.Template>
                <ControlTemplate >
                    <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" Background="Transparent">
                        <WrapPanel IsItemsHost="True" />
                    </ScrollViewer>
                </ControlTemplate>
            </ListView.Template>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" Background="Transparent" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>

        </ListView>-->

        <ListView Grid.Row="0" x:Name="ThumbnailListView"   Margin="2" Padding="10" ItemsSource="{Binding Images}"
                  SelectionMode="Extended"
                  SelectedItem="{Binding SelectedImageEntry}"
                  SelectionChanged="ThumbnailListView_OnSelectionChanged"
                  KeyDown="ThumbnailListView_OnKeyDown"
                  PreviewKeyDown="ThumbnailListView_OnPreviewKeyDown"
                  PreviewMouseLeftButtonDown="ThumbnailListView_OnPreviewMouseLeftButtonDown"
                  MouseUp="ThumbnailListView_OnMouseUp"
                  PreviewMouseLeftButtonUp="ThumbnailListView_OnPreviewMouseLeftButtonUp"
                  MouseMove="ThumbnailListView_OnMouseMove"
                  MouseDoubleClick="Control_OnMouseDoubleClick"
                  ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                  behaviors:ScrollSpeed.ScrollSpeed="11.5"
                  Tag="{Binding Path=.}"
                  ItemTemplate="{StaticResource SwitchingTemplate}"
                  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
            <ListView.Resources>
                <Style TargetType="ListViewItem">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsEmpty}" Value="True">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Setter Property="IsHitTestVisible" Value="False"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsEmpty}" Value="False">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Setter Property="IsHitTestVisible" Value="True"/>
                        </DataTrigger>
                    </Style.Triggers>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <Border Name="Border" Padding="2" SnapsToDevicePixels="true">
                                    <ContentPresenter />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="true">
                                        <Setter TargetName="Border" Property="Background"
                                                    Value="{DynamicResource HighlightBrush}"/>
                                    </Trigger>
                                    <Trigger Property="IsFocused" Value="true">
                                        <Setter TargetName="Border" Property="Background"
                                                Value="{DynamicResource FocusedBrush}"/>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsSelected" Value="True" />
                                            <Condition Property="IsFocused" Value="True" />
                                        </MultiTrigger.Conditions>
                                        <MultiTrigger.Setters>
                                            <Setter TargetName="Border" Property="Background"
                                                    Value="{DynamicResource HighlightFocusedBrush}"/>
                                        </MultiTrigger.Setters>
                                    </MultiTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ListView.Resources>
            <ListView.InputBindings>
                <KeyBinding Command="{Binding PrevPage}" Key="PageUp" Modifiers="Alt" Gesture="ALT+PageUp"></KeyBinding>
                <KeyBinding Command="{Binding NextPage}" Key="PageDown" Modifiers="Alt" Gesture="ALT+PageDown"></KeyBinding>
                <KeyBinding Command="{Binding FirstPage}" Key="Home" Modifiers="Alt" Gesture="ALT+Home"></KeyBinding>
                <KeyBinding Command="{Binding LastPage}" Key="End" Modifiers="Alt" Gesture="ALT+End"></KeyBinding>
                <KeyBinding Command="{Binding CopyFiles}" Key="C" Modifiers="Control" Gesture="Control+C"></KeyBinding>
                <KeyBinding Command="{Binding ToggleParameters}" Key="I"></KeyBinding>
            </ListView.InputBindings>
            <ListView.ContextMenu>
                <ContextMenu DataContext="{Binding Path=PlacementTarget.Tag, RelativeSource={RelativeSource Self}}" d:DataContext="{StaticResource ThumbnailViewModel}">
                    <MenuItem x:Name="AlbumMenu" IsEnabled="{Binding IsImage}" ItemsSource="{Binding MainModel.AlbumMenuItems}" Header="{lex:Loc Thumbnail.ContextMenu.AddToAlbum}" >
                    </MenuItem>
                    <MenuItem x:Name="SelectionAlbumMenu" ItemsSource="{Binding MainModel.SelectionAlbumMenuItems}" Header="{lex:Loc Thumbnail.ContextMenu.RemoveFromAlbum}"></MenuItem>
                    <Separator />
                    <MenuItem ItemsSource="{Binding MainModel.OpenWithMenuItems}" Header="{lex:Loc Thumbnail.ContextMenu.OpenWith}"></MenuItem>
                    <Separator />
                    <MenuItem IsEnabled="{Binding IsImage}" Header="{lex:Loc Thumbnail.ContextMenu.Favorite}" ToolTip="F" InputGestureText="F" Command="{Binding FavoriteCommand}"/>
                    <MenuItem IsEnabled="{Binding IsImage}" Header="{lex:Loc Thumbnail.ContextMenu.Rate}">
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.Rate.1}" Command="{Binding RatingCommand}" CommandParameter="1"></MenuItem>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.Rate.2}" Command="{Binding RatingCommand}" CommandParameter="2"></MenuItem>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.Rate.3}" Command="{Binding RatingCommand}" CommandParameter="3"></MenuItem>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.Rate.4}" Command="{Binding RatingCommand}" CommandParameter="4"></MenuItem>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.Rate.5}" Command="{Binding RatingCommand}" CommandParameter="5"></MenuItem>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.Rate.6}" Command="{Binding RatingCommand}" CommandParameter="6"></MenuItem>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.Rate.7}" Command="{Binding RatingCommand}" CommandParameter="7"></MenuItem>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.Rate.8}" Command="{Binding RatingCommand}" CommandParameter="8"></MenuItem>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.Rate.9}" Command="{Binding RatingCommand}" CommandParameter="9"></MenuItem>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.Rate.10}" Command="{Binding RatingCommand}" CommandParameter="10"></MenuItem>
                        <Separator></Separator>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.Rate.Remove}" Click="Unrate_OnClick"></MenuItem>
                    </MenuItem>
                    <MenuItem IsEnabled="{Binding IsImage}" Header="{lex:Loc Thumbnail.ContextMenu.NSFW}" ToolTip="N" InputGestureText="N" Command="{Binding NSFWCommand}"/>
                    <Separator />
                    <MenuItem IsEnabled="{Binding IsImage}" Header="{lex:Loc Thumbnail.ContextMenu.CopyParameter}">
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.CopyParameter.Prompt}" Command="{Binding CopyPromptCommand}"/>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.CopyParameter.NegativePrompt}" Command="{Binding CopyNegativePromptCommand}"/>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.CopyParameter.Seed}" Command="{Binding CopySeedCommand}"/>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.CopyParameter.Hash}" Command="{Binding CopyHashCommand}"/>
                        <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.CopyParameter.All}" Command="{Binding CopyParametersCommand}"/>
                    </MenuItem>
                    <MenuItem IsEnabled="{Binding IsImage}" Header="{lex:Loc Thumbnail.ContextMenu.CopyPath}" Command="{Binding CopyPathCommand}" />
                    <Separator />
                    <MenuItem IsEnabled="{Binding IsImage}" Header="{lex:Loc Thumbnail.ContextMenu.Copy}" InputGestureText="Ctrl+C" Command="{Binding CopyCommand}" />
                    <!--<MenuItem IsEnabled="{Binding IsImage}" Header="{lex:Loc Thumbnail.ContextMenu.Move}" Command="{Binding MoveCommand}"/>-->
                    <Separator />
                    <MenuItem Header="{lex:Loc Thumbnail.ContextMenu.ShowInExplorer}" Command="{Binding ShowInExplorerCommand}"/>
                    <MenuItem IsEnabled="{Binding IsImage}" Header="{lex:Loc Thumbnail.ContextMenu.ExpandToFolder}" Command="{Binding ExpandToFolderCommand}"/>
                    <Separator />
                    <MenuItem IsEnabled="{Binding IsImage}" Visibility="{Binding CurrentImage.ForDeletion, Converter={StaticResource invBoolToVisCol}}" Header="{lex:Loc Thumbnail.ContextMenu.ForDeletion}" InputGestureText="X/Del" Command="{Binding DeleteCommand}"/>
                    <MenuItem IsEnabled="{Binding IsImage}" Visibility="{Binding CurrentImage.ForDeletion, Converter={StaticResource boolToVisCol}}" Header="{lex:Loc Thumbnail.ContextMenu.Restore}" InputGestureText="X/Del" Command="{Binding DeleteCommand}"/>
                    <MenuItem IsEnabled="{Binding IsImage}" Header="{lex:Loc Thumbnail.ContextMenu.Remove}" InputGestureText="Ctrl+X/Del" Command="{Binding RemoveEntryCommand}"/>

                    <MenuItem IsEnabled="{Binding IsImage}" InputGestureText="Shift+X/Del" Command="{Binding PermanentlyDeleteCommand}" >
                        <MenuItem.Style>
                            <Style TargetType="MenuItem">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding MainModel.PermanentlyDelete}" Value="True">
                                        <Setter Property="Header" Value="{lex:Loc Thumbnail.ContextMenu.PermanentlyDelete}"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding MainModel.PermanentlyDelete}" Value="False">
                                        <Setter Property="Header" Value="{lex:Loc Thumbnail.ContextMenu.Delete}"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                    </MenuItem>
                    <Separator />
                    <MenuItem IsEnabled="{Binding IsImage}" Header="{lex:Loc Thumbnail.ContextMenu.Rescan}" Command="{Binding RescanCommand}" />
                </ContextMenu>
            </ListView.ContextMenu>
            <ListView.Template>
                <ControlTemplate >
                    <ScrollViewer ScrollChanged="ScrollViewer_OnScrollChanged" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" Background="Transparent">
                        <WrapPanel IsItemsHost="True" />
                    </ScrollViewer>
                </ControlTemplate>
            </ListView.Template>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" Background="Transparent" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>

        </ListView>

        <Grid  Background="#80000000" Visibility="{Binding IsBusy, Converter={StaticResource boolToVis}}">
            <fa:ImageAwesome Opacity="0.5" Icon="CircleOutlineNotch" Height="60" Spin="True" SpinDuration="1" Foreground="{DynamicResource ForegroundBrush}" />
        </Grid>


        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Label Grid.Column="0"  
                         VerticalAlignment="Stretch" 
                         HorizontalAlignment="Stretch" 
                         VerticalContentAlignment="Center"
                         Content="{Binding Results}"
                ></Label>
            <Slider Margin="0,0,30,0" Grid.Column="1" Width="90" VerticalAlignment="Center" Minimum="0" Maximum="20" ToolTip="{lex:Loc Thumbnail.Controls.Spacing}" Value="{Binding ThumbnailSpacing}">
                <Slider.Style>
                    <Style TargetType="Slider" BasedOn="{StaticResource {x:Type Slider}}">
                        <Setter Property="Visibility" Value="Hidden"></Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Model.MainModel.ThumbnailViewMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="{x:Static local:ThumbnailViewMode.Compact}">
                                <Setter Property="Visibility" Value="Visible"></Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Slider.Style>
            </Slider>
            <StackPanel Grid.Column="2"   Orientation="Horizontal">
                <Button Style="{DynamicResource BorderlessButton}" Width="24" IsEnabled="{Binding FirstPageEnabled}" ToolTip="{lex:Loc Thumbnail.Pagination.First}" Click="FirstPage_OnClick">
                    <fa:ImageAwesome Icon="FastBackward" Width="16" Foreground="{DynamicResource ForegroundBrush}" VerticalAlignment="Center" HorizontalAlignment="Center">
                    </fa:ImageAwesome>
                </Button>
                <Button Style="{DynamicResource BorderlessButton}" Width="24" IsEnabled="{Binding PrevPageEnabled}" ToolTip="{lex:Loc Thumbnail.Pagination.Previous}" Click="PrevPage_OnClick">
                    <fa:ImageAwesome Icon="Backward" Width="14" Foreground="{DynamicResource ForegroundBrush}" VerticalAlignment="Center" HorizontalAlignment="Center">
                    </fa:ImageAwesome>
                </Button>
                <TextBox  
                        MinWidth="30"
                             VerticalAlignment="Stretch" 
                             HorizontalAlignment="Stretch" 
                             VerticalContentAlignment="Center"
                             HorizontalContentAlignment="Center"
                             KeyDown="Page_OnKeyDown"
                             Text="{Binding Page, UpdateSourceTrigger=PropertyChanged}"
                    ></TextBox>
                <Label
                           VerticalAlignment="Stretch" 
                           HorizontalAlignment="Stretch" 
                           VerticalContentAlignment="Center"
                           HorizontalContentAlignment="Center"
                           Content="/"
                    ></Label>
                <Label   
                            MinWidth="30"
                           VerticalAlignment="Stretch" 
                           HorizontalAlignment="Stretch" 
                           VerticalContentAlignment="Center"
                           HorizontalContentAlignment="Center"
                           Content="{Binding Pages}"
                    ></Label>
                <Button Style="{DynamicResource BorderlessButton}" Width="24" IsEnabled="{Binding NextPageEnabled}" ToolTip="{lex:Loc Thumbnail.Pagination.Next}" Click="NextPage_OnClick">
                    <fa:ImageAwesome Icon="Forward" Width="14" Foreground="{DynamicResource ForegroundBrush}" VerticalAlignment="Center" HorizontalAlignment="Center">
                    </fa:ImageAwesome>
                </Button>
                <Button Style="{DynamicResource BorderlessButton}" Width="24" IsEnabled="{Binding LastPageEnabled}" ToolTip="{lex:Loc Thumbnail.Pagination.Last}" Click="LastPage_OnClick">
                    <fa:ImageAwesome Icon="FastForward" Width="16" Foreground="{DynamicResource ForegroundBrush}" VerticalAlignment="Center" HorizontalAlignment="Center">
                    </fa:ImageAwesome>
                </Button>
            </StackPanel>
        </Grid>
    </Grid>
</UserControl>
